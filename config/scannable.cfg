# Configuration file

general {
    # The basic scan radius without range modules.
    # IMPORTANT: some modules such as the block and ore scanner modules will already use
    # a reduced radius based on this value. Specifically, the ore scanners multiply this
    # value by 0.25, and the block scanner multiplies it by 0.5.
    # Range modules will boost the range by half this value.
    # Min: 16
    # Max: 128
    I:baseScanRadius=64

    # Registry names of blocks that will never be scanned.
    S:blockBlacklist <
        minecraft:command_block
     >

    # Amount of energy that can be stored in a scanner.
    # Min: 0
    # Max: 2147483647
    I:energyCapacityScanner=5000

    # Amount of energy used by the animal module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleAnimal=25

    # Amount of energy used by the block module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleBlock=100

    # Amount of energy used by the entity module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleEntity=75

    # Amount of energy used by the fluid module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleFluid=50

    # Amount of energy used by the monster module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleMonster=50

    # Amount of energy used by the common ore module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleOreCommon=100

    # Amount of energy used by the rare ore module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleOreRare=250

    # Amount of energy used by the range module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleRange=100

    # Amount of energy used by the structure module per scan.
    # Min: 0
    # Max: 2147483647
    I:energyCostModuleStructure=150

    # Fluid names of fluids that should be ignored.
    S:fluidBlacklist <
     >

    # The colors for fluids used when rendering their result bounding box.
    # See `oreColors` for format entries have to be in.
    S:fluidColors <
        water=0x4275DC
        lava=0xE26723
     >

    # Whether to try to inject a depth texture into Minecraft's FBO when rendering the
    # scan wave effect. This is much faster as it will not have to re-render the world
    # geometry to retrieve the depth information required for the effect. However, it
    # appears that on some systems this doesn't work. The mod tries to detect that and
    # will fall back to re-rendering automatically, but you can force re-rendering by
    # setting this to false, e.g. for debugging or just to avoid the one logged warning.
    B:injectDepthTexture=true

    # Whether to log out failure to determine the item stack dropped by a block.
    # Scannable needs to find the item stack representation of a block to get the
    # ore dictionary name(s) of blocks, as well as to show a more accurate tooltip
    # of the currently bound block in the block module. Scannable attempts to find
    # the item stack representation by calling Block.getPickBlock (which is allowed
    # to fail, as some blocks require a valid world state) and alternatively by using
    #  Item.getItemFromBlock+Block.damageDropped, the latter being verified using the
    # roundtrip through Block.damageDropped/Item.getMetadata/Block.getStateFromMeta.
    # Sadly this fails for a lot of modded blocks because people rarely implement
    # Block.damageDropped. As a workaround you can add blocks for which this fails to
    # the `statesCommon` and `statesRare` lists.
    B:logBlockDropLookupFailures=false

    # Ore dictionary entries that match the common ore pattern but should be ignored.
    S:oreBlacklist <
     >

    # The colors for ores used when rendering their result bounding box.
    # Each entry must be a key-value pair separated by a `=`, with the.
    # key being the ore dictionary name and the value being the hexadecimal
    # RGB value of the color.
    S:oreColors <
        oreCoal=0x433E3B
        poorOreCoal=0x433E3B
        denseOreCoal=0x433E3B
        oreIron=0xDDBCA7
        poorOreIron=0xDDBCA7
        denseOreIron=0xDDBCA7
        oreGold=0xF5F231
        poorOreGold=0xF5F231
        denseOreGold=0xF5F231
        oreLapis=0x164DF2
        poorOreLapis=0x164DF2
        denseOreLapis=0x164DF2
        oreDiamond=0x45F3FF
        poorOreDiamond=0x45F3FF
        denseOreDiamond=0x45F3FF
        oreRedstone=0xF22816
        poorOreRedstone=0xF22816
        denseOreRedstone=0xF22816
        oreEmerald=0x19D150
        poorOreEmerald=0x19D150
        denseOreEmerald=0x19D150
        oreQuartz=0xFFEDEB
        glowstone=0xE9E68E
        oreCopper=0xD5750A
        poorOreCopper=0xD5750A
        denseOreCopper=0xD5750A
        oreLead=0x425055
        poorOreLead=0x425055
        denseOreLead=0x425055
        oreMithril=0x7FFACD
        poorOreMithril=0x7FFACD
        denseOreMithril=0x7FFACD
        oreNickel=0xF0DEA5
        poorOreNickel=0xF0DEA5
        denseOreNickel=0xF0DEA5
        orePlatinum=0x66EDFF
        poorOrePlatinum=0x66EDFF
        denseOrePlatinum=0x66EDFF
        oreIridium=0xC7C6D8
        poorOreIridium=0xC7C6D8
        denseOreIridium=0xC7C6D8
        oreSilver=0xD5D5D7
        poorOreSilver=0xD5D5D7
        denseOreSilver=0xD5D5D7
        oreTin=0xDD3D4D5
        poorOreTin=0xDD3D4D5
        denseOreTin=0xDD3D4D5
        oreAluminum=0xCACBCC
        poorOreAluminum=0xCACBCC
        denseOreAluminum=0xCACBCC
        oreAluminium=0xCACBCC
        poorOreAluminium=0xCACBCC
        denseOreAluminium=0xCACBCC
        oreUranium=0x9DE054
        poorOreUranium=0x9DE054
        denseOreUranium=0x9DE054
        oreYellorium=0xD8E054
        poorOreYellorium=0xD8E054
        denseOreYellorium=0xD8E054
        oreArdite=0xC73E0C
        poorOreArdite=0xC73E0C
        denseOreArdite=0xC73E0C
        oreCobalt=0x1882DE
        poorOreCobalt=0x1882DE
        denseOreCobalt=0x1882DE
        oreDraconium=0x8C1FBF
        poorOreDraconium=0x8C1FBF
        denseOreDraconium=0x8C1FBF
        oreTitanium=0xB2669E
        poorOreTitanium=0xB2669E
        denseOreTitanium=0xB2669E
        oreDilithium=0xDDCECB
        poorOreDilithium=0xDDCECB
        denseOreDilithium=0xDDCECB
        oreBoron=0x797979
        poorOreBoron=0x797979
        denseOreBoron=0x797979
        oreLithium=0xF5EDDA
        poorOreLithium=0xF5EDDA
        denseOreLithium=0xF5EDDA
        oreMagnesium=0xF5DADA
        poorOreMagnesium=0xF5DADA
        denseOreMagnesium=0xF5DADA
        orePyrite=0xF5F231
        oreCinnabar=0xF5DA25
        oreAmethyst=0xFF5CFF
        oreRuby=0xF55C51
        orePeridot=0xACDF7D
        oreTopaz=0xE8A43F
        oreTanzanite=0xC56CD9
        oreMalachite=0x34BFAA
        oreSapphire=0x3F8CD4
        oreAmber=0xFCBC3A
        oreCincinnasite=0xF0D351
        oreAquamarine=0x80FFF2
        oreClathrateOilShale=0x636155
        oreClathrateOilSand=0x636155
        oreClathrateOilShale=0x636155
        oreOil=0x636155
     >

    # Ore dictionary entries considered common ores, requiring the common ore scanner module.
    # Use this to mark ores as common, as opposed to rare (see oresRare).
    S:oresCommon <
        oreCoal
        poorOreCoal
        denseOreCoal
        oreIron
        poorOreIron
        denseOreIron
        oreRedstone
        poorOreRedstone
        denseOreRedstone
        glowstone
        oreCopper
        poorOreCopper
        denseOreCopper
        oreLead
        poorOreLead
        denseOreLead
        oreTin
        poorOreTin
        denseOreTin
        oreAluminum
        poorOreAluminum
        denseOreAluminum
        oreAluminium
        poorOreAluminium
        denseOreAluminium
        orePyrite
        oreCinnabar
        oreAmethyst
        oreRuby
        orePeridot
        oreTopaz
        oreTanzanite
        oreMalachite
        oreSapphire
        oreAmber
        oreCincinnasite
        oreAquamarine
     >

    # Ore dictionary names of ores considered 'rare', requiring the rare ore scanner module.
    # Anything matching /ore[A-Z].*/ that isn't in the common ore list is
    # automatically considered a rare ore (as opposed to the other way around,
    # to make missing entries less likely be a problem). Use this to add rare
    # ores that do follow this pattern.
    S:oresRare <
        oreGold
        poorOreGold
        denseOreGold
        oreLapis
        poorOreLapis
        denseOreLapis
        oreDiamond
        poorOreDiamond
        denseOreDiamond
        oreEmerald
        poorOreEmerald
        denseOreEmerald
        oreQuartz
        oreMithril
        poorOreMithril
        denseOreMithril
        oreNickel
        poorOreNickel
        denseOreNickel
        orePlatinum
        poorOrePlatinum
        denseOrePlatinum
        oreIridium
        poorOreIridium
        denseOreIridium
        oreSilver
        poorOreSilver
        denseOreSilver
        oreUranium
        poorOreUranium
        denseOreUranium
        oreYellorium
        poorOreYellorium
        denseOreYellorium
        oreArdite
        poorOreArdite
        denseOreArdite
        oreCobalt
        poorOreCobalt
        denseOreCobalt
        oreDraconium
        poorOreDraconium
        denseOreDraconium
        oreTitanium
        poorOreTitanium
        denseOreTitanium
        oreDilithium
        poorOreDilithium
        denseOreDilithium
        oreBoron
        poorOreBoron
        denseOreBoron
        oreLithium
        poorOreLithium
        denseOreLithium
        oreMagnesium
        poorOreMagnesium
        denseOreMagnesium
        oreClathrateOilShale
        oreClathrateOilSand
        oreClathrateOilShale
        oreOil
     >

    # Block states considered common ores, requiring the common ore scanner module.
    # Use this to mark arbitrary block states as common ores. Format is as follows:
    #   mod_id:block_name
    # or with block properties:
    #   mod_id:block_name[property1=value1,property2=value2]
    # You can look up the properties (as well as name and mod id) in the F3 debug overlay
    # in the bottom right.
    S:statesCommon <
     >

    # Block states considered rare ores, requiring the rare ore scanner module.
    # Use this to mark arbitrary block states as rare ores. Format is as follows:
    #   mod_id:block_name
    # or with block properties:
    #   mod_id:block_name[property1=value1,property2=value2]
    # You can look up the properties (as well as name and mod id) in the F3 debug overlay
    # in the bottom right.
    S:statesRare <
     >

    # The list of structures the structure module scans for.
    S:structures <
        EndCity
        Fortress
        Mansion
        Mineshaft
        Monument
        Stronghold
        Temple
        Village
     >

    # Whether to consume energy when performing a scan.
    # Will make the scanner a chargeable item.
    B:useEnergy=true
}
